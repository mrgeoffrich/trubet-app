/**
 * api.ubet.com
 * api.ubet.com
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Inject, Injectable, Optional } from '@angular/core';
import { Http, Headers, URLSearchParams } from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType } from '@angular/http';

import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models from '../model/models';
import { BASE_PATH } from '../variables';
import { Configuration } from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class SalesapiApi {
    protected basePath = 'https://api.ubet.com';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

	/**
     * 
     * Extends object by coping non-existing properties.
     * @param objA object to be extended
     * @param objB source object
     */
    private extendObj<T1, T2>(objA: T1, objB: T2) {
        for (let key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return <T1 & T2>objA;
    }

    /**
     * salesVmaxWebDataSportsCouponsSportId0FalseGet
     * coupons
     * @param sportId sportId
     */
    public salesVmaxWebDataSportsCouponsSportId0FalseGetUsingGET(sportId: number, extraHttpRequestParams?: any): Observable<models.CouponsData> {
        return this.salesVmaxWebDataSportsCouponsSportId0FalseGetUsingGETWithHttpInfo(sportId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * salesVmaxWebDataSportsGet
     * Sports
     */
    public salesVmaxWebDataSportsGetUsingGET(extraHttpRequestParams?: any): Observable<models.SportsData> {
        return this.salesVmaxWebDataSportsGetUsingGETWithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * salesVmaxWebDataSportsMaineventMainEventIdGet
     * mainEvent
     * @param mainEventId mainEventId
     */
    public salesVmaxWebDataSportsMaineventMainEventIdGetUsingGET(mainEventId: number, extraHttpRequestParams?: any): Observable<models.MainEventData> {
        return this.salesVmaxWebDataSportsMaineventMainEventIdGetUsingGETWithHttpInfo(mainEventId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * salesVmaxWebDataSportsMeetingMaineventSubeventSubEventIdGet
     * subevent
     * @param subEventId subEventId
     */
    public salesVmaxWebDataSportsMeetingMaineventSubeventSubEventIdGetUsingGET(subEventId: number, extraHttpRequestParams?: any): Observable<models.SportData> {
        return this.salesVmaxWebDataSportsMeetingMaineventSubeventSubEventIdGetUsingGETWithHttpInfo(subEventId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * salesVmaxWebDataSportsMeetingMeetingIdGet
     * meetingId
     * @param meetingId meetingId
     */
    public salesVmaxWebDataSportsMeetingMeetingIdGetUsingGET(meetingId: number, extraHttpRequestParams?: any): Observable<models.SportData> {
        return this.salesVmaxWebDataSportsMeetingMeetingIdGetUsingGETWithHttpInfo(meetingId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }


    /**
     * salesVmaxWebDataSportsCouponsSportId0FalseGet
     * coupons
     * @param sportId sportId
     */
    public salesVmaxWebDataSportsCouponsSportId0FalseGetUsingGETWithHttpInfo(sportId: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/sales/vmax/web/data/sports/coupons/${sportId}/0/false`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'sportId' is not null or undefined
        if (sportId === null || sportId === undefined) {
            throw new Error('Required parameter sportId was null or undefined when calling salesVmaxWebDataSportsCouponsSportId0FalseGetUsingGET.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];





        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * salesVmaxWebDataSportsGet
     * Sports
     */
    public salesVmaxWebDataSportsGetUsingGETWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/sales/vmax/web/data/sports`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];





        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * salesVmaxWebDataSportsMaineventMainEventIdGet
     * mainEvent
     * @param mainEventId mainEventId
     */
    public salesVmaxWebDataSportsMaineventMainEventIdGetUsingGETWithHttpInfo(mainEventId: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/sales/vmax/web/data/sports/mainevent/${mainEventId}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'mainEventId' is not null or undefined
        if (mainEventId === null || mainEventId === undefined) {
            throw new Error('Required parameter mainEventId was null or undefined when calling salesVmaxWebDataSportsMaineventMainEventIdGetUsingGET.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];





        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * salesVmaxWebDataSportsMeetingMaineventSubeventSubEventIdGet
     * subevent
     * @param subEventId subEventId
     */
    public salesVmaxWebDataSportsMeetingMaineventSubeventSubEventIdGetUsingGETWithHttpInfo(subEventId: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/sales/vmax/web/data/sports/meeting/mainevent/subevent/${subEventId}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'subEventId' is not null or undefined
        if (subEventId === null || subEventId === undefined) {
            throw new Error('Required parameter subEventId was null or undefined when calling salesVmaxWebDataSportsMeetingMaineventSubeventSubEventIdGetUsingGET.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];





        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * salesVmaxWebDataSportsMeetingMeetingIdGet
     * meetingId
     * @param meetingId meetingId
     */
    public salesVmaxWebDataSportsMeetingMeetingIdGetUsingGETWithHttpInfo(meetingId: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/sales/vmax/web/data/sports/meeting/${meetingId}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'meetingId' is not null or undefined
        if (meetingId === null || meetingId === undefined) {
            throw new Error('Required parameter meetingId was null or undefined when calling salesVmaxWebDataSportsMeetingMeetingIdGetUsingGET.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];





        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
